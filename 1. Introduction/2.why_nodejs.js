// https://www.freecodecamp.org/news/node-js-what-when-where-why-how-ab8424886e2/#:~:text=Non%2Dblocking%20I%2FO%20operations,the%20next%20piece%20of%20code.

//nodejs is a event driven, non blocking I?O model that makes it light weight and efficient.

//I/O -> nodejs use input/output model to interact with outside world

//I/O operations include reading/writing data from/to a disk, making HTTP requests, and talking to databases. They are very slow compared to accessing memory (RAM) or doing work on the CPU.

//The reason for I/O operations to be done asynchronously is that they are very slow and would block further execution of code otherwise.

//Blocking methods execute synchronously while non-blocking methods execute asynchronously.

// Blocking refers to operations that block further execution until that operation finishes while non-blocking refers to code that doesnâ€™t block execution. Or as Node.js docs puts it, blocking is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes.

// Non-blocking I/O operations allow a single process to serve multiple requests at the same time. Instead of the process being blocked and waiting for I/O operations to complete, the I/O operations are delegated to the system, so that the process can execute the next piece of code. Non-blocking I/O operations provide a callback function that is called when the operation is completed.

// A callback is a function passed as an argument into another function, which can then be invoked (called back) inside the outer function to complete some kind of action at a convenient time. The invocation may be immediate (sync callback) or it might happen at a later time (async callback).

//what is non-blocking i/o model means->
// i/o operation take time , with nodejs we get non blocking i/o, means if our node application is waiting for a response, let say a response from the database, it can do other things, it can continue to process other code and met other requests now non-blocking is actually from the browser

// Events and event-driven programming
// Events are actions generated by the user or the system, like a click, a completed file download, or a hardware or software error.

// Event-driven programming is a programming paradigm in which the flow of the program is determined by events. An event-driven program performs actions in response to events. When an event occurs it triggers a callback function.
